---

  - name: Check if GI is already installed
    shell: grep "{{ oracle_home_gi }}" "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |wc -l
    tags: 
    - checkifgiinstall
    register: checkgiinstall

#  - debug: var=checkgiinstall.stdout
#    tags:
#     - checkifgiinstall

  - name: Add new dotprofile (GI)
    template: src=dotprofile-gi.j2 dest={{ grid_user_home }}/{{ oracle_profile_name_gi }} owner={{ grid_user }} group={{ oracle_group }} mode=755 backup=yes
    tags: 
    - dotprofilegi

  - name: Create stage directory (base)
    file: dest={{ oracle_stage }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directories
 
  - name: Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item.version }} mode=775 owner="{{ oracle_user }}" group={{ oracle_group }} state=directory
    sudo: yes
    with_items: oracle_sw_image_gi
    when:  oracle_install_version_gi  ==  item.version 
    tags:
      - directories
  
  - name: Create rsp stage directory
    file: dest={{ oracle_rsp_stage }} mode=775 owner="{{ oracle_user }}" group={{ oracle_group }} state=directory
    tags:
      - directories

  - name: Create ORACLE_INVENTORY directory
    file: dest={{ oracle_base }}/cfgtoollogs owner={{ oracle_user }} group={{ oracle_group }} mode=775 state=directory
    tags:
      - directories
  
  - name: Create ORACLE_BASE directory
    file: dest={{ oracle_base }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directories
  
  - name: Create admin directory
    file: dest={{ oracle_base }}/admin mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directories

  - name: Create cfgtoollogs directory
    file: dest={{ oracle_base }}/cfgtoollogs mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    tags:
      - directories
  
  - name: Create ORACLE_HOME directory (GI)
    file: dest={{ oracle_home_gi }} owner="{{ grid_user }}" group={{ oracle_group }} state=directory mode=775
    sudo: yes
    tags:
      - directories
    when: checkgiinstall.stdout != "1" 


  - name: Copy oracle installfiles to server (GI) (web)
    get_url: url={{ oracle_sw_source_www }}/{{ item.filename }} dest={{ oracle_stage }} mode=775
    with_items:  oracle_sw_image_gi 
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - oragridsw
    when: master_node and checkgiinstall.stdout != "1" and not is_sw_source_local and "{{ oracle_install_version_gi }}" == "{{ item.version }}" and oracle_sw_copy

  - name: Copy oracle installfiles to server (GI) (local)
    get_url: url={{ oracle_sw_source_local }}/{{ item.filename }} dest={{ oracle_stage }} mode=775
    with_items:  oracle_sw_image_gi 
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - oragridsw
    when: master_node and checkgiinstall.stdout != "1" and is_sw_source_local and "{{ oracle_install_version_gi }}" == "{{ item.version }}" and oracle_sw_copy

  - name: Extract files to stage-area (GI)
    unarchive: src={{ oracle_stage }}/{{ item.filename }}  dest={{ oracle_stage }}/{{ item.version }} copy=no 
    with_items: oracle_sw_image_gi
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - oragridswunpack
    when: master_node and checkgiinstall.stdout != "1" and "{{ oracle_install_version_gi }}" == "{{ item.version }}" and oracle_sw_copy and oracle_sw_unpack

  - name: Extract files to stage-area (GI) (from remote location)
    unarchive: src={{ oracle_stage_remote }}/{{ item.filename }}  dest={{ oracle_stage }}/{{ item.version }} copy=no
    with_items: oracle_sw_image_gi
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
    - oragridswunpack
    when: master_node and checkgiinstall.stdout != "1" and "{{ oracle_install_version_gi }}" == "{{ item.version }}" and not oracle_sw_copy and oracle_sw_unpack
    

  - name: Setup response file for install (GI)
    template: src=grid-install.rsp.{{ oracle_install_version_gi }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} owner="{{ grid_user }}" group={{ oracle_group }} mode=775 backup=yes
    tags:
      - responsefilegi
    when: master_node and checkgiinstall.stdout != "1"
    
  - name: Install Grid Infrastructure
    shell: "{{ oracle_stage_install }}/{{ oracle_install_version_gi }}/grid/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -waitforcompletion -ignorePrereq -ignoreSysPrereqs -showProgress -silent"
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - oragridinstall
    when: master_node and checkgiinstall.stdout != "1" #and oracle_sw_unpack
    register: giinstall

#  - name: Install Grid Infrastructure
#    shell: "{{ oracle_stage }}/{{ oracle_install_version_gi }}/grid/runInstaller -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -waitforcompletion -ignorePrereq -ignoreSysPrereqs -showProgress -silent"
#    sudo: yes
#    sudo_user: "{{ grid_user }}"
#    tags:
#      - oragridinstall
#    when: master_node and checkgiinstall.stdout != "1" not and oracle_sw_unpack
#    register: giinstall

  - debug: var=giinstall.stdout_lines
    when: master_node and checkgiinstall.stdout != "1"

  - name: Run oraInstroot script after installation
    shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
    sudo: yes
    tags:
      - runroot
    when: checkgiinstall.stdout != "1"

  - name: Run root script after installation (Master Node)
    shell: "{{ oracle_home_gi }}/root.sh"
    sudo: yes
    tags:
      - runroot
    when: master_node and checkgiinstall.stdout != "1"
    register: rootmaster

  - name: Run root script after installation (Other Nodes)
    shell: "{{ oracle_home_gi }}/root.sh"
    sudo: yes
    tags:
      - runroot
    when: not master_node and checkgiinstall.stdout != "1"
    register: rootother
  
  - debug: var=rootother.stdout_lines
    when: not master_node and checkgiinstall.stdout != "1"

  - name: Setup response file for configToolAllCommands
    template: src=configtoolallcommands.rsp.{{ oracle_install_version_gi }}.j2 dest={{ oracle_rsp_stage }}/configtoolallcommands.rsp owner="{{ grid_user }}" group={{ oracle_group }} mode=755 backup=yes
    tags:
      - responsefileconfigtool
    when: master_node and run_configtoolallcommand  and checkgiinstall.stdout != "1"

  - name: Run configToolAllCommands
    shell: "{{ oracle_home_gi }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_rsp_stage }}/configtoolallcommands.rsp"
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - runconfigtool
    when: master_node and run_configtoolallcommand and oracle_install_version_gi != '11.2.0.4' and checkgiinstall.stdout != "1"
    register: configtool

  - name: Run configToolAllCommands (if 11.2.0.4)
    shell: "{{ oracle_home_gi }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_rsp_stage }}/configtoolallcommands.rsp"
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - runconfigtool
    when: master_node and run_configtoolallcommand and oracle_install_version_gi == '11.2.0.4' and checkgiinstall.stdout != "1"
    ignore_errors: true
    register: configtool

  - name: Check if stuff is running
    shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
    tags:
     - crsctl
    register: crsctl
    when: master_node and checkgiinstall.stdout != "1"
  
  - debug: var=crsctl.stdout_lines
    tags:
     - crsctl
    when: master_node and checkgiinstall.stdout != "1"

  - name: Update Nodelist, set CRS=TRUE
    shell: "{{ oracle_home_gi }}/oui/bin/runInstaller -updateNodeList ORACLE_HOME={{ oracle_home_gi }} CRS=TRUE"
    sudo: yes
    sudo_user: "{{ grid_user }}"
    tags:
      - updatenodelist
    when : master_node and checkgiinstall.stdout != "1"

  - name: Add additional info to glogin.sql (1)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set sqlprompt "_user @ _connect_identifier:>"' backup=yes
    tags:
      - glogin
    when: checkgiinstall.stdout != "1"

  - name: Add additional info to glogin.sql (2)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set time on' backup=yes
    tags:
      - glogin
    when: checkgiinstall.stdout != "1"

  - name: Check opatch lsinventory (GI)
    shell: "{{ oracle_home_gi }}/OPatch/opatch lsinventory"
    sudo: yes
    sudo_user: "{{ grid_user }}"
    register: opatchls
    tags:
     - opatchls
    when: checkgiinstall.stdout != "1"
    
  - name: Check opatch lsinventory (GI)
    debug: var=opatchls.stdout_lines
    tags:
     - opatchls
    when: checkgiinstall.stdout != "1"
